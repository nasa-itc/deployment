---
##### GUI #####
- name: Install Desktop Environment
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  block:
    - name: Install the 'Development tools' package group
      ansible.builtin.yum:
        name: "@Development tools"
        state: present
    - name: Install the 'Gnome desktop' environment group
      ansible.builtin.yum:
        name: "@Server with GUI"
        state: present
    - name: Default to graphics
      become: yes
      when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
      command: systemctl set-default graphical

##### O/S packages, environment, jstar branding, etc. #####
- name: Include OS specific variables
  when: ansible_facts['os_family'] == "Debian"
  include_vars:
    file: "Debian.yml"
    name: osvars
  tags: base
- name: Include OS specific variables
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  include_vars:
    file: "RedHat.yml"
    name: osvars
  tags: base

##### O/S packages #####
- name: Update apt package cache
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  apt: update_cache=yes
  tags: base
- name: Add epel-release repository for yum
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum:
    name: "epel-release"
    state: present
  tags: base
#- name: Add powertools repository for yum
#  become: yes
#  when: (OS == "rocky")
#  command: dnf config-manager --set-enabled powertools
- name: Add docker repository for yum
  become: yes
  when: (OS == "rocky")
  command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
- name: Remove runc to avoid conflicts with docker
  become: yes
  when: (OS == "rocky")
  ansible.builtin.yum:
    name: runc
    state: absent
#- name: Add ol8_codeready_builder repository for yum
#  become: yes
#  when: (OS == "oracle")  
#  command: dnf config-manager --set-enabled ol8_codeready_builder
- name: Update yum package cache
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum: update_cache=yes
  tags: base
- name: Install jstar required packages
  become: yes
  package:
    state: latest
    name: "{{ osvars.packages_to_install }}"
  tags: base

# Debian VSCode
- name: Install VS code on Debian
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  snap:
    name: code
    classic: yes

# RHEL VSCode
- name: Setup VS Code Repository on RHEL-Based Systems
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum_repository:
      name: vscode
      description: Microsoft Visual Studio Code
      baseurl: https://packages.microsoft.com/yumrepos/vscode
      enabled: yes
      gpgkey: https://packages.microsoft.com/keys/microsoft.asc
      gpgcheck: yes

- name: Install VS Code on RHEL-Based Systems
  become: yes
  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
  yum:
      name: code

# RHEL Docker Setup
#- name: RHEL docker start and enable
#  become: yes
#  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
#  block:
#    - name: RHEL Start docker
#      command: systemctl start docker
#    - name: RHEL enable docker start across reboots
#      command: systemctl enable docker

# Versioning
- name: Versioning
  tags:
    - base
    - version
  block:
  - name: Include versioning variables
    include_vars: Version.yml
  - name: Add version and timestamp info config file to record basebox versioning
    become: yes
    blockinfile:
      path: /etc/jstar-deployment-release
      create: yes
      block: |
        vm_provisioning_date="{{ date }}"
        deployment_repo_sha1="{{ git_sha1 }}"
        deployment_repo_date="{{ git_date }}"
        deployment_repo_refs="{{ git_refs }}"
        deployment_repo_tags="{{ git_tags }}"
        deployment_repo_modified_files="{{ git_mods }}"

##### Configure environment, crash reporting, and core dumps #####
- name: Up the message queue maximum
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    create: yes
    regexp: fs.mqueue.msg_max
    line: 'fs.mqueue.msg_max=500'
  tags: base
- name: Up the max user watches for VS code
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    create: yes
    regexp: fs.inotify.max_user_watches
    line: 'fs.inotify.max_user_watches=524288'
  tags: base
- name: Update system config now
  become: yes
  ignore_errors: yes
  command:  sysctl -p
  tags: base
- name: Remove apport on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  package:
    state: absent
    name: apport
  tags: base
- name: Set core dump pattern on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/sysctl.conf
    create: yes
    regexp: core_pattern
    line: 'kernel.core_pattern=core.%e.%p.%t'
  tags: base
- name: Set soft core dump limits on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'soft.*core'
    line: '*                soft    core            unlimited'
  tags: base
- name: Set hard core dump limits on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'hard.*core'
    line: '*                hard    core            unlimited'
  tags: base
- name: Set ptrace abilities on Ubuntu
  become: yes
  when: ansible_facts['os_family'] == "Debian"
  lineinfile:
    path: /etc/sysctl.d/10-ptrace.conf
    create: yes
    regexp: 'kernel.yama.ptrace_scope'
    line: 'kernel.yama.ptrace_scope = 0'
  tags: base
- name: Set soft real time priority limits
  become: yes
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'soft.*rtprio'
    line: '*                soft    rtprio            99'
  tags: base
- name: Set hard real time priority limits
  become: yes
  lineinfile:
    path: /etc/security/limits.conf
    create: yes
    regexp: 'hard.*rtprio'
    line: '*                hard    rtprio            99'
  tags: base
# No special crash reporting/debugging config on RHEL (yet)

# RHEL podman use crun
#- name: Have podman use crun instread of runc
#  become: yes
#  when: (ansible_facts['os_family'] == "RedHat") or (ansible_facts['os_family'] == "Rocky")
#  lineinfile:
#    path: /usr/share/containers/containers.conf
#    create: yes
#    regexp: 'runtime = "runc"'
#    line: 'runtime = "crun" # "runc"'
